{"version":3,"sources":["components/CurrentWeather.js","components/ForecastIcon.js","components/ForecastInfo.js","components/ForecastContainer.js","components/Header.js","components/RecentlySearched.js","App.js","reportWebVitals.js","index.js"],"names":["CurrentWeather","_ref","weatherData","_useState","useState","_useState2","Object","slicedToArray","iconUrl","setIconUrl","useEffect","base_url","concat","weather","icon","react_default","a","createElement","className","style","color","width","src","alt","Math","floor","main","temp","description","feels_like","wind","speed","humidity","ForecastIcon","props","img","setImg","_useState3","_useState4","day","setDay","days","console","log","d","Date","dt_txt","getDay","ForecastInfo","ForecastContainer","isHover","setIsHover","onMouseEnter","onMouseLeave","components_ForecastInfo","components_ForecastIcon","Header","city","RecentlySearched","data","build_requests","onClick","location","App","setWeatherData","forecast","setForecast","_useState5","_useState6","bgChange","setBgChange","_useState7","_useState8","prevSearched","setPrevSearched","apiKey","background_list","full_url","baseURL","forecastURL","get_forecast_data","get_current_data","asyncToGenerator","_regeneratorRuntime","mark","_callee","url_","response","jsonData","wrap","_context","prev","next","fetch","sent","json","cod","alert","add_to_history","changeBackground","stop","_x","apply","this","arguments","_ref2","_callee2","list","forecast_list","i","_context2","length","push","_x2","current_searched","searched_location","name","some","obj","pop","id","unshift","backgroundImage","components_Header","onSubmit","event","preventDefault","document","forms","value","type","placeholder","map","item","components_RecentlySearched","key","components_CurrentWeather","Fragment","components_ForecastContainer","dt","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.78d6d9cd.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nconst CurrentWeather = ({weatherData}) => {\n\n  const [iconUrl, setIconUrl] = useState()\n  \n  useEffect(() => {\n    const base_url =`https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png` //04n@2x.png\n    setIconUrl(base_url)\n  },[weatherData])\n\n  return (\n    <div className='current-weather-container'>\n      <h1 style={{color:'aliceblue', \n                  width:'50pt'}}>\n                    Now\n                  </h1>\n\n        <div className='current-icon-container'>\n            <img \n              src={iconUrl} \n              alt='Weather-Icon'\n              className='main-icon'\n            />\n            <h1 className='temp-icon'>{Math.floor(weatherData.main.temp - 273)} ºC</h1>\n        </div>\n        <div className='current-weather-info'>\n            <p>Description: {weatherData.weather[0].description}</p>\n            <p>Feels like: {Math.floor(weatherData.main.feels_like - 275)} ºC</p>\n            <p>Wind: {weatherData.wind.speed} mph</p>\n            <p>Humidity: {weatherData.main.humidity}%</p>\n        </div>\n    </div>\n  )\n}\n\nexport default CurrentWeather","\nimport React, { useEffect, useState } from \"react\"\n\nconst ForecastIcon = (props) => {\n\n    const [img, setImg] = useState()\n    const [day, setDay] = useState()\n\n    const days = ['Sun','Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n\n\n\n    useEffect(() => {\n        const base_url =`https://openweathermap.org/img/wn/${props.day.weather[0].icon}@2x.png`\n        console.log(base_url)\n        setImg(base_url)\n\n        var d = new Date(props.day.dt_txt)\n        \n        setDay(days[d.getDay()])\n        console.log(d)\n      },[props])\n\n    return (\n        <div>\n            <h3 style={{color:\"white\", width:\"fit-content\"}}>{day}</h3>\n            <div className='forecast-icon-container'>\n                <img src={img} alt='WIcon'/>\n            </div>\n            <div className=\"forecast-temp-container\">\n                <h2>\n                    {Math.floor(props.day.main.temp - 273)} ºC \n                </h2>\n            </div>\n        </div>\n    )\n}\n\nexport default ForecastIcon","import React from 'react';\n\nconst ForecastInfo = (props) => {\n    console.log(props.day)\n    return (\n        \n        <div className=\"forecast-info\">\n            <h4>\n                {props.day.weather[0].description}\n            </h4>\n            <h4>\n                Wind: {props.day.wind.speed} mph\n            </h4>\n            <h4>\n                Humidity: {props.day.main.humidity} %\n            </h4>\n            <h4>\n                Feels like: {Math.floor(props.day.main.feels_like - 275)} ºC\n            </h4>\n        </div>\n    )\n}\n\nexport default ForecastInfo","import {useState } from \"react\"\nimport ForecastIcon from \"./ForecastIcon\"\nimport ForecastInfo from \"./ForecastInfo\"\nimport React from 'react';\n\n\nconst ForecastContainer = (props) => {\n\n  const [isHover, setIsHover] = useState(false)\n  \n  return (\n    <div \n      className='future-forecast-container' \n      onMouseEnter={() => setIsHover(true)} \n      onMouseLeave={() => setIsHover(false)}\n    >\n\n      {\n        isHover?(\n          <ForecastInfo day={props.day}/>\n          \n        ):(\n          <ForecastIcon  day={props.day}/>\n        )\n      }\n\n\n      \n    </div>\n  )\n}\n\nexport default ForecastContainer","import React from 'react';\n\nconst Header = (props) => {\n\n  return (\n    <div className='header'>\n        <div>\n          <h1>\n              Weather Forecast {props.city}\n          </h1>\n        </div>\n\n        <div>\n          \n        </div>\n    </div>\n  )\n}\n\nexport default Header","import React from 'react';\n\nconst RecentlySearched = ({ data, build_requests }) => {\n  return (\n    <div className='recently-searched' onClick={() => build_requests(data.location)}>\n        <h3>{data.location}:</h3>\n        <div className=\"searched-temp\">\n          <h4>{data.temp}ºC</h4>\n        </div>     \n        <div className=\"searched-image-container\">\n          <img src={data.icon}></img>\n        </div>\n    </div>\n  )\n}\n\nexport default RecentlySearched","import './App.css';\nimport React from 'react';\nimport {useState, useEffect} from 'react'\nimport CurrentWeather from './components/CurrentWeather';\nimport ForecastContainer from './components/ForecastContainer';\nimport Header from './components/Header';\nimport RecentlySearched from './components/RecentlySearched';\n\n\n\n\n\n\nconst App = () => {\n  \n  const [weatherData, setWeatherData] = useState() //track state of CURRENT weather data received from API\n  const [forecast, setForecast] = useState() //track state of 5 day forecast data \n  const [bgChange, setBgChange] = useState(0) //track state of background \n  const [prevSearched, setPrevSearched] = useState([]) //track state of search history\n\n\n  const baseURL = \"http://api.openweathermap.org/data/2.5/weather?\" //base url for api request\n  const apiKey = '611042e26a7e14d8816d44ac68c3562c'\n\n\n  const background_list = [ //list of background images\n    'https://wallpaper.dog/large/17055601.jpg',\n    'https://wallpaperaccess.com/full/38581.jpg',\n    'https://images.pexels.com/photos/618833/pexels-photo-618833.jpeg?cs=srgb&dl=pexels-sagui-andrea-618833.jpg&fm=jpg',\n    'https://images6.alphacoders.com/568/thumb-1920-568500.jpg',\n    'https://www.teahub.io/photos/full/364-3646715_countryside-grass-fields-scenery-4k-landscape-field-hd.jpg',\n    'https://www.pixelstalk.net/wp-content/uploads/images6/City-Wallpaper-4K-HD-Free-download.jpg',\n    'https://www.technocrazed.com/wp-content/uploads/2015/12/Paris-Wallpaper-background-21.jpg',\n    'https://images7.alphacoders.com/408/thumb-1920-408397.jpg',\n    'https://wallpapercave.com/wp/wp4088751.jpg',\n    'https://wallpaperaccess.com/full/1564384.jpg',\n    'https://images.pexels.com/photos/2779863/pexels-photo-2779863.jpeg?cs=srgb&dl=pexels-nextvoyage-2779863.jpg&fm=jpg'\n  ]\n\n\n  const build_requests = (city) => {\n    let full_url = baseURL + \"appid=\" + apiKey + \"&q=\" + city  //build request url for current weather API request\n    let forecastURL = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}` //build url for forecast data API request\n    get_forecast_data(forecastURL)\n    get_current_data(full_url)\n  }\n  \n\n  const handle_search = (event) => { \n    event.preventDefault()\n    let searched_location = document.forms['searchForm']['search_bar']\n    build_requests(searched_location.value)\n  }\n\n\n\n  const get_current_data = async (url_) => {\n    const response = await fetch(url_)\n    const jsonData = await response.json()\n    console.log(jsonData)\n    if (jsonData.cod === 404) {\n      alert('invalid location')\n    }else{\n      setWeatherData(jsonData)\n      add_to_history(jsonData)\n      changeBackground() //change background whenever new location is searched\n    }\n\n  }\n\n\n\n\n  const get_forecast_data = async(url_) => {\n\n    const response = await fetch(url_)\n    const jsonData = await response.json()\n    const list = jsonData.list\n    let forecast_list = []\n\n    for (var i = 5; i<list.length; i+=8){\n      forecast_list.push(list[i])\n    }\n    setForecast(forecast_list)\n  }\n\n\n\n\n\n  const changeBackground = () => {\n    if (bgChange < background_list.length - 1){ //checks that {int bgChange} is not exceeding the length of image list\n      setBgChange(bgChange + 1) //if bgChange is less than the length of image list, move to the next image in the list\n    }else{\n      setBgChange(0) //if last image in the list, go back to first image in the list\n    }\n  }\n\n\n\n\n\n\n  const add_to_history = (data) => {\n    const current_searched = prevSearched //get current state of prevSearched (will be an array of objects)\n    const searched_location = { //this will become a constructor once more data is required\n      location: data.name,\n      temp: Math.floor(data.main.temp - 273),\n      icon: `https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`\n    }\n\n    if (current_searched.some((obj) => obj.location === searched_location.location) === false){ //check if new location is already included in  current_searched\n      \n      if (current_searched.length > 4){\n        current_searched.pop()\n      }\n      console.log(searched_location)\n      \n      searched_location.id = current_searched.length\n      current_searched.unshift(searched_location) //push searched location to current_searched\n      setPrevSearched(current_searched) //update prevSearched\n    }\n  }\n\n\n  const get_from_recent = (data) => {\n    setWeatherData(data)\n  }\n\n  useEffect(() => { //when first loaded, get default weather info from API\n    const default_url = \"https://api.openweathermap.org/data/2.5/weather?appid=611042e26a7e14d8816d44ac68c3562c&q=london\"\n    const default_forecast = \"https://api.openweathermap.org/data/2.5/forecast?q=plymouth&appid=611042e26a7e14d8816d44ac68c3562c\"\n    get_current_data(default_url)\n    get_forecast_data(default_forecast)\n  }, [])\n\n\n\n\n\n//611042e26a7e14d8816d44ac68c3562c\n  return (\n    <div \n      className=\"App\" \n      style={{backgroundImage: `url('${background_list[bgChange]}')`\n      }}>\n\n      {\n      weatherData?(\n        <Header city={weatherData.name}/>\n      ):(\n        <h5>NULL</h5>\n      )}\n      \n      <div className=\"search_container\">\n        <form name='searchForm' onSubmit={handle_search}>\n          <input \n            className=\"searchBar\" \n            type='search'\n            name='search_bar' \n            placeholder='Search by City...'\n          />\n        </form>\n      </div>\n\n      {\n        prevSearched?(\n          prevSearched.map((item) => <RecentlySearched \n                                        key={item.id} \n                                        data={item} \n                                        build_requests={build_requests}\n                                        />)\n        ):(\n          <p>No data</p>\n        )\n      } \n\n      {\n        weatherData?(\n          <CurrentWeather \n            weatherData={weatherData}\n          />\n        ):(\n          <>\n            <h1>Cannot load data</h1>\n          </>\n        )\n      }\n      \n\n      <div className='days-list-container'>\n        {\n          forecast?(\n            forecast.map((day) => <ForecastContainer key={day.dt} day={day}/>)\n          ):(\n            <h1>No data</h1>\n          )\n        }\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}